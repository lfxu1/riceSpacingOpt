import Plant.*;

const float lm = 0.6235;
const float c = 0.7552;
const FloatToFloat leafWidth = float t => float -(t*(t-2*lm)/lm**2)**c;   //Micha

const int[] phyllochron = {70,70,104,72,111,106,97,100,117,142,198,281,351,629};
const ShaderRef grain = shader("grain");
const ShaderRef grainAlt = shader("grainAlt");
const ShaderRef yleaf = shader("yleaf");
const ShaderRef shmat = shader("sheath");

const FunctionRef grsize = function ("grainsize");  //project:/Rice101120_Grain_11[1]/data  //lfxu101120
const FunctionRef grainangle = function ("brangle");
const FunctionRef awlen = function ("awnlength");

module LSRotation (double finalAngle) extends RL; //()0.001) GBS090620

module Internode (super.length, super.radius, int rank, int order, int tb, int age)
		extends Cylinder(length, radius/2.0).(setShader(shmat))
{
	int appearDay = 0;
	float agr = 0; //actual growth rate
	float agr_radius = 0;
	float agr2 = 0; //ignore limit(<=pgr),wy131121add
    float pgr = 0;  //lfxu100517
	float pgr_radius = 0;//wy131121
    float dryMass = 0;
	int max_age = 400;  //GBS090620, changed from 20. value need to check  //the age when the organ stops growing
	
	int ID;  //lfxu100406
	void setID(int id)
	{
		ID = id;
	}
	
	public boolean isGrowing() {
		return age < max_age;
	}
	
	public float getFinalDM()//wy131218
	{
		float intnL = ConstPara.intn_distribution_rate[rank-1]*ConstPara.plantHeight;
		float fnL = Math.max(intnL, 0);
		return fnL*ConstPara.rho;
	}
		
	public float updatePgr() //wy131121,g
	{
		int te = ConstPara.TE_INTERNODE[rank-1];
		int tm = ConstPara.TM_INTERNODE[rank-1];
		float finalDM = getFinalDM();
		pgr = SigmoidFunction.YinDerivative(finalDM, te, tm, age);
		return pgr;
	}
	
	public float updateRadiusPgr() //wy131121,m
	{
		int te = ConstPara.TE_INTERNODE[rank-1]-appearDay;
		int tm = ConstPara.TM_INTERNODE[rank-1]-appearDay;
		pgr_radius = SigmoidFunction.YinDerivative(0.01, te, tm, age);
		return pgr_radius;
	}
	
	public float updateAgr(float indSinkDemand, float indCpool)
	{
		agr = SigmoidFunction.Growth(pgr, indSinkDemand, indCpool);//intn.updateAgr();//wy131124
		agr2 = SigmoidFunction.Growth2(pgr, indSinkDemand, indCpool); //intn.updateAgr2();//wy131124
		agr_radius = SigmoidFunction.Growth(pgr_radius, indSinkDemand, indCpool); //intn.updateRadiusAgr();//wy131124
		return agr;
	}
	
	public void updateLength() //wy131121
	{
		length += agr/ConstPara.rho; 
	}
	
	public void updateRadius() //wy131121
	{
		radius += agr_radius;
	}
	
	public void updateDryMass() //wy131121
	{
		dryMass += agr;
	}
	
	public void updateAge() //wy131121
	{
		age++;
	}
}

//------------Leaf------------------------
module Leaf(int rank, float length, float diameter, int age, boolean used, /*float locCStore,*/ float sen, int order, float angle) 
{	//{ setLayer(2);} //gbs100225
	int appearDay = 0;
	
	float tiltAngle = 0; //叶倾角 //wy131208
	
	float locPool = 0;
	float agr = 0;//actual growth rate
	float agr2 = 0; //ignore limit(<=pgr),wy131121add
	float pgr = 0;//potential growth rate
	float dryMass = 0;
	
	float area = 0; // in m^2
	//float area_inc = 0;// area increment //wy131121close
	double radiation; //wy131120:j-->radiation
	float max_age = 0; //the age when the orgran stops growing
	
	int ID;  //lfxu100406
	void setID(int id)
	{
		ID = id;
	}
	
	public boolean isGrowing() {
		return sen<1;
	}
	
	public void updateSen() //wy131121
	{
		if ((sen<=1) && (age > max_age()) ) 
		{
			sen += 0.01; //0.03; GBS090609
		}
	}
		
	public float getFinalDryMass() //wy131122 //wy131204use fbl[]
	{
		float finalLength = ConstPara.fbl[rank-1];
		float finalArea = finalLength * 0.015;
		float fnD = finalArea/ConstPara.cfl;
		return Math.max(0,fnD);
	}
	
	public float updatePgr()
	{
		int te = ConstPara.TE_LEAF[rank-1];
		int tm = ConstPara.TM_LEAF[rank-1];
		float fnD = getFinalDryMass(); //wy131122
		pgr = SigmoidFunction.YinDerivative(fnD, te, tm, age);
		return pgr;
	}
	
	public float updateAgr(float indSinkDemand, float indCpool)
	{
		agr = SigmoidFunction.Growth(pgr, indSinkDemand, indCpool); //lf.updateAgr(); //wy131124
		agr2 = SigmoidFunction.Growth2(pgr, indSinkDemand, indCpool); //lf.updateAgr2(); //wy131124
		return agr;
	}
	
	public void updateLength()
	{
		float area_inc = agr * ConstPara.cfl;
		float growth_length = area_inc / diameter;
		length += growth_length;
	}
	
	public void updateDiameter()
	{
		float growth_diameter = diameter<=(0.01+0.00065*rank)?0.0005:0;
		diameter += growth_diameter;
	}
	
	public void updateDryMass()
	{
		dryMass += agr;
	}
	
	public void updateAngle()
	{
		angle = Math.min(angle+1,90-ConstPara.fba[rank]);
	}
	
	public void photosynthesis()
	{
		float production = PSdaily(area, RiceBreeder.INSTANCE.breedTime, radiation);
		if(production > 0)  
			locPool = production;
		else
			locPool = 0;
	}
	
	public double PSdaily (float a, int day, float IR)
	{
		Environment e = new Environment (IR*0.5); 
		Species s = new Species ();
		LeafC3 l = new LeafC3 ();
		double Assi = 0;
		for (int hour=0; hour<24; hour++)
		{	
			l.compute (e, s, day, hour);
			Assi += l.An * a * 3600 * 44.01e-6f * 180.162f/264.06f; //lfxu091202
		}
		return Assi;
	}
	
	public float max_age() {
		max_age = 2 * (3.2*rank + 11.8); //3.2*rank + 11.8;
		return max_age;
	}
}
 ==>
	if(used==false) (
		{
			float a,b; 
			area=0;
			float rankFactor = 0.15+0.05*(12-rank);
		}
		RL(angle) //angle //wy131120mark //wy131204初始叶角度 changed from 10
		for (int n = 1; n<ConstPara.END; n++)
		(
			{
				a = length/(float)ConstPara.END;
				b = leafWidth[1-n/(float)ConstPara.END]*diameter*2; 
			}
			Parallelogram(a, b).(setShader(new RGBAShader(sen,1,0)))
			if(n<ConstPara.CASS) (
				RL(rankFactor* 0.25*LeafFunction.parabole(n))
			) else (
				RL(rankFactor* LeafFunction.ellipse(n))
			)
			{area+= a*b;}
		) 
	);

module InflMeristem (int rank, int order) extends Plant.Cell(0,0,0)
{
	int ID;  //lfxu100517
	void setID(int id)
	{
		ID = id;
	}
}

//------------grain------------------------
module Grain(int age, float size, ShaderRef shader, int order, int rank) //extends Organ
{
	ParticleSwarm ps = ParticleSwarm.getInstance();
	float agr = 0;
	float agr2 = 0; //ignore limit(<=pgr),wy131121add
	float pgr = 0;
	float dryMass = 0;
	
	int ID;  //lfxu100517
	void setID(int id)
	{
		ID = id;
	}
		
	public void setScale(float s) {
		size = s;
	}
	
	//lfxu090701
	public float finalDM() {
		float thousandGrainWeight = ConstPara.MeanGrainWeight; //lfxu101120, for testing
		float finalDM = thousandGrainWeight / 1000;  //in g, not kg!!!
		return finalDM; 
	}
	
	public float updatePgr() {
		float te = 40;//60; //20;  //40  //lfxu101120
		float tm = 15;//20;//20//10 //30 
		float fnD = finalDM();
		pgr = SigmoidFunction.YinDerivative(fnD, te, tm, age); //wy131120add
		return pgr;
	}
	
	public float updateAgr(float indSinkDemand, float indCpool)
	{
		agr = SigmoidFunction.Growth(pgr, indSinkDemand, indCpool);
		agr2 = SigmoidFunction.Growth2(pgr, indSinkDemand, indCpool);
		return agr2;//change
	}
	
	public float updateScale()
	{
]		setScale(0.055 + 0.5*agr);
	}
	
	public void updateDryMass()
	{
		dryMass += (1-1/(1+Math.exp(sortMin()-15)))*agr;//dryMass根据间距进行抑制
	}
	
	public void updateAge()
	{
		age++;
	}
	
	public double sortMin() {
		double result = ps.PSOspacing[ps.currentGeneration][ps.count][0];
		for(int i=1; i<ps.PSOspacing[ps.currentGeneration][ps.count].length; i++) {
			result = Math.min(result, ps.PSOspacing[ps.currentGeneration][ps.count][i]);
		}
		//println("min:"+result);
		return result;
	}
}
 ==> Instance("grain").(setScale(size),setShader(shader),setTransforming(false));  //lfxu101120

module BotNode (int rank, super.radius) extends Sphere(radius).(setColor(0xAADD44));

//function to calculate the leaf rank-dependent time (in degree-days since germination) of leaf initiation 

double ts0 (int rank)
{
	float tmp = 0;
	if (rank<=10) {
		tmp = 100;
	} else if(rank>10 && rank<=14 ) {
		tmp = 100 + 10*rank;
	}
	return tmp + ConstPara.PLASTOCHRON * rank;
}

//-------------------------physiology-----------------------------------

private int getStage()  //lfxu110104, from 1-9  !notice: the index should be stage-1
{
	int t = RiceBreeder.INSTANCE.breedTime;
	int stage = 0;
	if(t<30){
		stage = 1;
	} else if(t>=30 && t<120) {
		stage = (t-30)/10 + 1;
	} else if(t>=120) {
		stage = 9;
	}
	//println("-------current stage: " + stage);
	return stage;
}


/** 穗轴
 * graphical representation of the rachis 
 * (or spike axis: spindle of the ear on which the spikelets are inserted)
 */
 Node rachis (float size)
{
	//return new F (50 * size, 0.1f*ConstPara.SCALE_EAR).(setShader(yleaf));
	return new F (100 * size, 0.1f*ConstPara.SCALE_EAR).(setShader(yleaf)); //wy131201
} 
/* module rachis (float size) ==> F (25 * size, 0.1f, 7); */

/** method morphology. 
 * Cannot be directly invoked by the user. Here, a set of developmental growth and 
 * branching rules is repetitively applied to the Meristem and all its ensuing organs, 
 * leading to the visible phenotype: 
 */
protected void morphology ()
[  
	pred: . m:Meristem(pc, rank, order, age, grownOut)  (* -ancestor-> ind:Individual *)
	==>>
		pred 
		//{m[age]++;}
		if (pc > 0)		/* during a plastochron, no organ is formed */
		(
			{
				m[plastChron] :-= ConstPara.TA[RiceBreeder.INSTANCE.breedTime]-10;
			}
			break
		)

		else if (rank <= ConstPara.MAX_RANK) 
		(
			[
				RV(-0.3) RH(ConstPara.trha*rank) RL(ConstPara.trla)
				tl:Tiller(rank, order+1, false) 
				{	tl.setID(m[ID]);
					tl[tl_num] = 0;
				} //lfxu101105  //lfxu101224
			]
			tropism(m, HEAD, ConstPara.CULM_BEND)
			RV(-0.05) //gbs100225 //wy131208close
			BotNode(rank, 0.0001)
			if(rank==1) 
				(RH(90))//(RH(irandom(0,360)))  //lfxu101027, gbs:random orientation of the plants//wy131203
			[
					RH(180*rank) ////wy131204互生
					lf:Leaf(rank,0.005,0.0005,1,false, 0, order, 0) 
					{	lf.setID(m[ID]);
						lf.appearDay = ind.growDays;
						lf.tiltAngle = 90-m[angle]; //wy131208
					} 
			]
			intn:Internode(0.001,0.0, rank, order, 0, age) 
			{	intn.setID(m[ID]);
				intn.appearDay = ind.growDays;
			}
			m
			{
				m[plastChron] := phyllochron[m[rank]]; 
				m[rank] :+= 1; 
				m[grownOut] := true;
				m.angle = (m[order]-1)*ConstPara.trla*(1-ConstPara.CULM_BEND); //wy131208
			}
		) else (
			break
		)
		if(ind.earFlag)
		(
			intn:Internode(0.001,0.003, rank, order, 0, age) 
			{	intn.setID(m[ID]);
				intn.appearDay = ind.growDays;
			}
			infm:InflMeristem(1,1) 
			{infm.setID(m[ID]);} //lfxu100517
		)
		;
			
	//lfxu101220
	tl: Tiller(rank, order, false)(* -ancestor-> ind:Individual *), (RiceBreeder.INSTANCE.breedTime<=60)
	==>
		{   //int IDTemp = tl[ID]-1;
			int stage = Math.min(RiceBreeder.INSTANCE.breedTime/10, 8);  //stage 0-8  //lfxu101212
			int tnb_temp[] = {1,3,5,7,9,11,9,7,5};
		}
		{
			long currentTilNumber = count((* til:Tiller, (til[ID]==ind[ID] && til[grow] ) *)); //current tiller number
			long currentMerNumber = count((* mer:Meristem, (mer[ID]==ind[ID]) *)); //current meristem number
		}
		
		if(currentTilNumber + currentMerNumber < ConstPara.ftn)
		(
			[
				RV(-0.3) RH(ConstPara.trha+10) RL(ConstPara.trla)
				til:Tiller(rank, order+1, true) {til.setID(ind[ID]);} 
				mer:Meristem(phyllochron[rank], rank + 1, order, 1, false) 
				{	mer.setID(tl[ID]);
					mer[angle] = (til[order]*ConstPara.trla)*(1-ConstPara.CULM_BEND)**til[order];
				} 
			]
		)
		{derive();}
		;
	
	pred:. infm:InflMeristem(rank, order) (* -ancestor-> ind:Individual *)
	==>> pred 
		{
			long currentGrainNumber = count((* g:Grain, (g[ID]==infm[ID]) *));//wy131203
			long currentInfNumber = count((* inf:InflMeristem, (inf[ID]==infm[ID])*));
		}
		if(ind[Cpool]>0.5 && (currentGrainNumber + currentInfNumber <ind[grainFinalNumber]) )
		(
			rachis((float) grsize.evaluate(1) * 0.00035)
			if (infm[order]==1 && infm[rank]<5) 
			(   //lfxu101121
				[	RL(3) RV(0.5) //RH(random(-20,20)) //wy131130,chenged from RL(7),add RH() //131203
					im:InflMeristem(1, order+1) {im.setID(infm[ID]);}
				]
			)
			[	RL(10) RH(90) //lfxu100517
				g:Grain(0, 0.055, (probability(0.5))?grain:grainAlt, order, rank) {g.setID(infm[ID]);}
				RH(180) RL(10)
			] 
			RL(10) RH(180) 
			RV(0.2) infm {infm.rank+1;}
		); 
		
	//g:Grain, (Parameter.INSTANCE.Cpool[g[ID]-1]>0) ::>  //lfxu101120
	g:Grain (* -ancestor-> ind:Individual*)
	::>
		{
			if (ind.Cpool>0 && ind.earGrowDays<=40)
			{
				g.updateScale();
				g.updateDryMass();
			}
			g.updateAge();
		}
	
	intn:Internode (* -ancestor-> ind:Individual *)
	::>
	{
		if (ind.Cpool>0)
		{	
			intn.updateLength();
			intn.updateRadius();
			intn.updateDryMass();
		}
		intn.updateAge();
	}

	bn: BotNode(rank, radius), (rank > 5 && radius <= 0.001f) ::> 
	{
		bn[radius] += 0.0001f;
	}

	lf:Leaf (* -ancestor-> ind:Individual *) /*, (* m:M lt:LeafTip *)*/ 
	::> 
	{
		lf.updateSen(); //wy131123open
		if (ind.Cpool>0)
		{
			lf.updateLength();
			lf.updateDiameter();
			lf.updateDryMass();
		}
		lf.updateAngle();
		lf.age++;
		lf[radiation] = RiceBreeder.INSTANCE.radiation.getAbsorbedPower(lf).integrate()*ConstPara.GRPAR;
		//photosynthesis
		lf.photosynthesis();
	}
	
]
