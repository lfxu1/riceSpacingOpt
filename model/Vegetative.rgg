import Plant.*;

//------------------other parameters for model-----------------------------------
//wy131130
//double RH_ANGLE = Math.random()*360 + 90;
//double RL_ANGLE = random(40,50);//Math.round(Math.random()*(55-40)+40);

//mh090525
//const CurveRef sheathcon = curve ("sheath"); //GBS090724 //wy131119 close
const float lm = 0.6235;
const float c = 0.7552;
const FloatToFloat leafWidth = float t => float -(t*(t-2*lm)/lm**2)**c;   //Micha

//int[] tnb_counter = {0,0,0,0};  //lfxu101224 //wy131119close
//<--original data-->const float[] fba = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10}; //wy131204 final blade angle

//const float[] fsl = {0.02, 0.02, 0.0295,0.0661,0.1130,0.1539,0.1912,0.2549,0.2935,0.3250}; //0.3468,0.3552,0.3699,0.3934};  //Dauzat's French manual
//const float[] fbl = {0.02, 0.02, 0.0355,0.1079,0.2010,0.2821,0.3558,0.4821,0.5585,0.6210,0.6642,0.6808,0.7101,0.7566};
//lfxu100517, measured data(3+...+5)
//<--original data-->const float[] fbl = {0.02,0.02,0.0355, 0.365,0.445,0.535,0.67,0.6875,0.645,0.545,0.46,0.6210,0.6642,0.6808,0.7101,0.7566}; //wy131122close
//lfxu100517, final DM of leaf, convert from fbl, cfl, and width 0.015  
//const float[] lf_fnD ={0.01,0.01,0.02,0.2,0.3,0.34,0.437,0.5,0.7,0.74,0.84,0.95,0.96,0.57,0.58,0.59};  //lfxu101203
//lfxu110112, leaves too long, back to old value
//<--original data-->const float[] lf_fnD ={0.013,0.013,0.022,0.23,0.29,0.34,0.437,0.44,0.64,0.74,0.84,0.95,0.96,0.57,0.58,0.59};
//const float[] lf_fnD ={0.01,0.01,0.02,0.2,0.3,0.4,0.43,0.44,0.54,0.64,0.74,0.95,0.96,0.57,0.58,0.59};  //lfxu110121, comment

//lfxu010201 internode length, measured data, last 8 //lfxu100401, much better
//const float[] Intn_l = {0,0,0.001,0.005,0.01,0.0195,0.0435,0.077,0.1005,0.155,0.2325,0.425,0.425}; //wy131119open //wy131122close
//lfxu100703, average plant height: 115cm, distribution to internodes  //lfxu110119, comment
//const float[] intn_distribution_rate = {0, 0, 0.00067, 0.0033, 0.0067, 0.013, 0.03, 0.052, 0.067, 0.11, 0.156, 0.284, 0.284};
//lfxu110119
//const float[] intn_distribution_rate = {0.01, 0.01, 0.011, 0.013, 0.017, 0.023, 0.04, 0.062, 0.077, 0.12, 0.166, 0.294, 0.294};
//lfxu110121
//const float[] intn_distribution_rate = {0.001, 0.001, 0.002, 0.007, 0.014, 0.026, 0.06, 0.104, 0.134, 0.22, 0.312, 0.568, 0.568};

/* wy131119mark
what is phyllochron?
The shoot apical meristem (SAM) produces lateral organs in a regular spacing (phyllotaxy) 
and at a regular interval (phyllochron) during the vegetative phase.
*/
const int[] phyllochron = {70,70,104,72,111,106,97,100,117,142,198,281,351,629};
//const int[] phyllochron = {35,35,52,36,55,53,49,50,58,71,99,140,176,315};  //lfxu110121

// tiller angle
//<--original data-->float RH_ANGLE = 90;//Math.random()*360 + 90; //wy131203
//<--original data-->float RL_ANGLE = 20; //random(ConstPara.RL_ANGLE_MIN,ConstPara.RL_ANGLE_MAX);//wy131203

//-------------------shader-----------------------------------------------------
const ShaderRef grain = shader("grain");
const ShaderRef grainAlt = shader("grainAlt");
const ShaderRef yleaf = shader("yleaf");
const ShaderRef shmat = shader("sheath");

const FunctionRef grsize = function ("grainsize");  //project:/Rice101120_Grain_11[1]/data  //lfxu101120
const FunctionRef grainangle = function ("brangle");
const FunctionRef awlen = function ("awnlength");

//-------------------rotation-----------------------------------------------------
//module EvasiveVertex(float size) extends Vertex(size); //wy131120
module LSRotation (double finalAngle) extends RL; //()0.001) GBS090620
//module LBRotation (double finalAngle, int counter) extends RL(0.001);

//-------------------morphology-------------------------------------------------
//------------internode------------------------
module Internode (super.length, super.radius, int rank, int order, int tb, int age)
		extends Cylinder(length, radius/2.0).(setShader(shmat))
{
	int appearDay = 0;
	float agr = 0; //actual growth rate
	float agr_radius = 0;
	float agr2 = 0; //ignore limit(<=pgr),wy131121add
    float pgr = 0;  //lfxu100517
	float pgr_radius = 0;//wy131121
		   //pgr2 = 0, //wy131121close
	       //finalDM = 0; //final dry matter of the organ //wy131121close
    float dryMass = 0;
	//int fnn = par.fnn_internode; //final number of specific organ
	int max_age = 400;  //GBS090620, changed from 20. value need to check  //the age when the organ stops growing
	
	int ID;  //lfxu100406
	void setID(int id)
	{
		ID = id;
	}
	
	public boolean isGrowing() {
		return age < max_age;
	}
	
	public float getFinalDM()//wy131218
	{
		float intnL = ConstPara.intn_distribution_rate[rank-1]*ConstPara.plantHeight;
		float fnL = Math.max(intnL, 0);
		return fnL*ConstPara.rho;
	}
	
	/*
	public float getFinalLength() //wy131121
	{
		//float addLen = 0;
		//float plantHeight = (104.1146+addLen)*0.01*2.5; //wy131204
		float intnL = intn_distribution_rate[rank-1]*ConstPara.plantHeight;
		float fnL = Math.max(intnL, 0);
		return fnL;
	}*/
	
	public float updatePgr() //wy131121,g
	{
		//int te = ConstPara.TE_INTERNODE[rank-1]-appearDay;
		//int tm = ConstPara.TM_INTERNODE[rank-1]-appearDay;
		int te = ConstPara.TE_INTERNODE[rank-1];
		int tm = ConstPara.TM_INTERNODE[rank-1];
		float finalDM = getFinalDM();
		pgr = SigmoidFunction.YinDerivative(finalDM, te, tm, age);
		return pgr;
	}
	
	public float updateRadiusPgr() //wy131121,m
	{
		int te = ConstPara.TE_INTERNODE[rank-1]-appearDay;
		int tm = ConstPara.TM_INTERNODE[rank-1]-appearDay;
		pgr_radius = SigmoidFunction.YinDerivative(0.01, te, tm, age);
		return pgr_radius;
	}
	
	public float updateAgr(float indSinkDemand, float indCpool)
	{
		agr = SigmoidFunction.Growth(pgr, indSinkDemand, indCpool);//intn.updateAgr();//wy131124
		agr2 = SigmoidFunction.Growth2(pgr, indSinkDemand, indCpool); //intn.updateAgr2();//wy131124
		agr_radius = SigmoidFunction.Growth(pgr_radius, indSinkDemand, indCpool); //intn.updateRadiusAgr();//wy131124
		return agr;
	}
	
	public void updateLength() //wy131121
	{
		length += agr/ConstPara.rho; 
	}
	
	public void updateRadius() //wy131121
	{
		radius += agr_radius;
	}
	
	public void updateDryMass() //wy131121
	{
		dryMass += agr;
	}
	
	public void updateAge() //wy131121
	{
		age++;
	}
}

//------------Leaf------------------------
module Leaf(int rank, float length, float diameter, int age, boolean used, /*float locCStore,*/ float sen, int order, float angle) 
{	//{ setLayer(2);} //gbs100225
	int appearDay = 0;
	
	float tiltAngle = 0; //Ò¶Çã½Ç //wy131208
	
	float locPool = 0;
	float agr = 0;//actual growth rate
	float agr2 = 0; //ignore limit(<=pgr),wy131121add
	float pgr = 0;//potential growth rate
	float dryMass = 0;
	
	float area = 0; // in m^2
	//float area_inc = 0;// area increment //wy131121close
	double radiation; //wy131120:j-->radiation
	float max_age = 0; //the age when the orgran stops growing
	
	int ID;  //lfxu100406
	void setID(int id)
	{
		ID = id;
	}
	
	public boolean isGrowing() {
		return sen<1;
	}
	
	public void updateSen() //wy131121
	{
		if ((sen<=1) && (age > max_age()) ) 
		{
			sen += 0.01; //0.03; GBS090609
		}
	}
	
	/*
	public float getFinalDryMass() //wy131121 //wy131204use lf_fnD[]
	{
		float addLen = 0;
		float fnD = Math.max((ConstPara.lf_fnD[rank-1]+addLen), 0);
		return fnD;
	}*/
	
	public float getFinalDryMass() //wy131122 //wy131204use fbl[]
	{
		float finalLength = ConstPara.fbl[rank-1];
		float finalArea = finalLength * 0.015;
		float fnD = finalArea/ConstPara.cfl;
		return Math.max(0,fnD);
	}
	
	public float updatePgr()
	{
		//print("here");
		//int te = ConstPara.TE_LEAF[rank-1]-appearDay;
		//int tm = ConstPara.TM_LEAF[rank-1]-appearDay;
		int te = ConstPara.TE_LEAF[rank-1];
		int tm = ConstPara.TM_LEAF[rank-1];
		//float fnD = getFinalDryMass(); //wy131122close
		float fnD = getFinalDryMass(); //wy131122
		pgr = SigmoidFunction.YinDerivative(fnD, te, tm, age);
		return pgr;
	}
	
	public float updateAgr(float indSinkDemand, float indCpool)
	{
		agr = SigmoidFunction.Growth(pgr, indSinkDemand, indCpool); //lf.updateAgr(); //wy131124
		agr2 = SigmoidFunction.Growth2(pgr, indSinkDemand, indCpool); //lf.updateAgr2(); //wy131124
		return agr;
	}
	
	public void updateLength()
	{
		float area_inc = agr * ConstPara.cfl;
		float growth_length = area_inc / diameter;
		length += growth_length;
	}
	
	public void updateDiameter()
	{
		float growth_diameter = diameter<=(0.01+0.00065*rank)?0.0005:0;
		diameter += growth_diameter;
	}
	
	/*wy1121,see area = a*b
	updateArea() //wy131121
	{
		float area_inc = growth_DM * cfl;
		area += area_inc;
	}*/
	
	public void updateDryMass()
	{
		dryMass += agr;
	}
	
	public void updateAngle()
	{
		angle = Math.min(angle+1,90-ConstPara.fba[rank]);
	}
	
	public void photosynthesis()
	{
		float production = PSdaily(area, RiceBreeder.INSTANCE.breedTime, radiation);
		if(production > 0)  
			locPool = production;
		else
			locPool = 0;
	}
	
	/* wy131123
	 * daily photosynthate production, dependent upon leaf area and time (DAS)
	 * @para a: area
	 * @para time: day
	 * @para IR: intercepted radiation
	 * @return Assi: assimilation substance
	 */
	public double PSdaily (float a, int day, float IR)
	{
		Environment e = new Environment (IR*0.5); 
		//Environment e = new Environment ();
		Species s = new Species ();
		LeafC3 l = new LeafC3 ();
		double Assi = 0;
		//double Sc = 0;
		//double Dr = 0;
		for (int hour=0; hour<24; hour++)
		{	
			l.compute (e, s, day, hour);
			Assi += l.An * a * 3600 * 44.01e-6f * 180.162f/264.06f; //lfxu091202
		}
		return Assi;
	}
	
	public float max_age() {
		max_age = 2 * (3.2*rank + 11.8); //3.2*rank + 11.8;
		return max_age;
	}
	/*wy131121close
	public float finalDM(int rank){
		//lfxu090624
		float finalLength = fbl[rank-1];
		float finalArea = finalLength * 0.015;
		//convert
		finalDM = finalArea/cfl;
		println("=================="+finalLength+" : "+finalDM);
		return Math.max(0,finalDM);
	}*/
}
 ==>
	if(used==false) (
		{
			float a,b; 
			area=0;
			float rankFactor = 0.15+0.05*(12-rank);
		}
		RL(angle) //angle //wy131120mark //wy131204³õÊ¼Ò¶½Ç¶È changed from 10
		for (int n = 1; n<ConstPara.END; n++)
		(
			{
				a = length/(float)ConstPara.END;
				b = leafWidth[1-n/(float)ConstPara.END]*diameter*2; 
			}
			Parallelogram(a, b).(setShader(new RGBAShader(sen,1,0)))
			//Parallelogram(a, b).(setShader(new AlgorithmSwitchShader(new RGBAShader(radiation,radiation*0.1,radiation*0.1),new RGBAShader(sen,1,0))))
			if(n<ConstPara.CASS) (
				RL(rankFactor* 0.25*LeafFunction.parabole(n))
			) else (
				RL(rankFactor* LeafFunction.ellipse(n))
			)
			{area+= a*b;}
		) 
	);

/* wy131120mark
////------------sheath------------------------
// the leaf sheath //Sheath() not used
//gbs090624
module Sheath (float length, float diameter, double fsl, float finalDiameter, int rank, int order) 
==> [ RH(180) for (1:6) ( [ Parallelogram(length,diameter/3).(setShader(shmat)) ]
	RU(90) RL(25) M(diameter/6) RU(-90) ) ] ;  //lfxu090701  shmat 
*/

//module LeafTip(int age, int ID) extends Sphere(0.02).(setShader(new RGBAShader(1,0,0))); //wy131120

//------------inflorescence------------------------
/* wy131120
 * inflorescence (or generative) meristem forming a spike by lateral formation of spikelets
 * @para t: a factor depends on number is used to form rachis
 * @para number: number of little inflorescence per inflorescence
 */
module InflMeristem (int rank, int order) extends Plant.Cell(0,0,0)
{
	int ID;  //lfxu100517
	void setID(int id)
	{
		ID = id;
	}
}

//------------grain------------------------
module Grain(int age, float size, ShaderRef shader, int order, int rank) //extends Organ
{
	ParticleSwarm ps = ParticleSwarm.getInstance();
	float agr = 0;
	float agr2 = 0; //ignore limit(<=pgr),wy131121add
	float pgr = 0;
	float dryMass = 0;
	
	//float dm = 0; //wy131121close
	//float agr = 0; //wy131121close
	int ID;  //lfxu100517
	void setID(int id)
	{
		ID = id;
	}
	
	/*wy131121close
	public float getDryMass() {
		return dm;
	}*/
	
	
	public void setScale(float s) {
		size = s;
	}
	
	//lfxu090701
	public float finalDM() {
		//int index_temp = ID-1+Parameter.INSTANCE.whichIndividuals; //lfxu101109, defaut //wy131125
		//index_temp = Parameter.INSTANCE.entry[Parameter.INSTANCE.traitForVisualization][ID-1] - 1; //run Data
		//float thousandGrainWeight = Parameter.INSTANCE.MaxGrainWeight[index_temp]; //lfxu101026
		float thousandGrainWeight = ConstPara.MeanGrainWeight; //lfxu101120, for testing
		float finalDM = thousandGrainWeight / 1000;  //in g, not kg!!!
		return finalDM; 
	}
	
	public float updatePgr() {
		float te = 40;//60; //20;  //40  //lfxu101120
		float tm = 15;//20;//20//10 //30 
		float fnD = finalDM();
		pgr = SigmoidFunction.YinDerivative(fnD, te, tm, age); //wy131120add
		return pgr;
	}
	
	public float updateAgr(float indSinkDemand, float indCpool)
	{
		agr = SigmoidFunction.Growth(pgr, indSinkDemand, indCpool);
		agr2 = SigmoidFunction.Growth2(pgr, indSinkDemand, indCpool);
		return agr2;//change
	}
	
	public float updateScale()
	{
		//setScale(0.055 + 0.25*agr);
		setScale(0.055 + 0.5*agr);
	}
	
	public void updateDryMass()
	{
		dryMass += (1-1/(1+Math.exp(sortMin()-15)))*agr;//dryMass¸ù¾Ý¼ä¾à½øÐÐÒÖÖÆ
	}
	
	public void updateAge()
	{
		age++;
	}
	
	public double sortMin() {
		double result = ps.PSOspacing[ps.currentGeneration][ps.count][0];
		for(int i=1; i<ps.PSOspacing[ps.currentGeneration][ps.count].length; i++) {
			result = Math.min(result, ps.PSOspacing[ps.currentGeneration][ps.count][i]);
		}
		//println("min:"+result);
		return result;
	}
}
 //==> Instance(name).(setScale(size),setShader(shader),setTransforming(false));
 ==> Instance("grain").(setScale(size),setShader(shader),setTransforming(false));  //lfxu101120

module BotNode (int rank, super.radius) extends Sphere(radius).(setColor(0xAADD44));

//function to calculate the leaf rank-dependent time (in degree-days since germination) of leaf initiation 
 /*
double ts0 (int rank)
{
	return RiceBreeder.INSTANCE.tsr0(rank) + ConstPara.PLASTOCHRON * rank;
}*/
double ts0 (int rank)
{
	float tmp = 0;
	if (rank<=10) {
		tmp = 100;
	} else if(rank>10 && rank<=14 ) {
		tmp = 100 + 10*rank;
	}
	return tmp + ConstPara.PLASTOCHRON * rank;
}

//-------------------------physiology-----------------------------------

/*wy131204
private long countTiller(int id)  //lfxu100703
{
	long tillerNumber = 0;
	tillerNumber = count((* tl:Tiller, (tl[ID]==id && tl[grow] ) *));//lfxu101220
	return tillerNumber;
}

private long countMeristem(int id) //wy131204
{
	long meristemNumber = 0;
	meristemNumber = count((* m:Meristem, (m[ID]==id) *));
	return meristemNumber;
}*/

private int getStage()  //lfxu110104, from 1-9  !notice: the index should be stage-1
{
	int t = RiceBreeder.INSTANCE.breedTime;
	int stage = 0;
	if(t<30){
		stage = 1;
	} else if(t>=30 && t<120) {
		stage = (t-30)/10 + 1;
	} else if(t>=120) {
		stage = 9;
	}
	//println("-------current stage: " + stage);
	return stage;
}


/** ËëÖá
 * graphical representation of the rachis 
 * (or spike axis: spindle of the ear on which the spikelets are inserted)
 */
 Node rachis (float size)
{
	//return new F (50 * size, 0.1f*ConstPara.SCALE_EAR).(setShader(yleaf));
	return new F (100 * size, 0.1f*ConstPara.SCALE_EAR).(setShader(yleaf)); //wy131201
} 
/* module rachis (float size) ==> F (25 * size, 0.1f, 7); */

/** method morphology. 
 * Cannot be directly invoked by the user. Here, a set of developmental growth and 
 * branching rules is repetitively applied to the Meristem and all its ensuing organs, 
 * leading to the visible phenotype: 
 */
protected void morphology ()
[  
	//lfxu101220
	//pred: . m:Meristem(pc, rank, order, age, grownOut) (* -ancestor-> Individual -par.GEN_EDGE-> g:Genotype *) //wy131119 change to
	pred: . m:Meristem(pc, rank, order, age, grownOut)  (* -ancestor-> ind:Individual *)
	==>>
		pred 
		//{m[age]++;}
		if (pc > 0)		/* during a plastochron, no organ is formed */
		(
			{
				m[plastChron] :-= ConstPara.TA[RiceBreeder.INSTANCE.breedTime]-10;
			}
			break
		)
		/* formation of new organs when the internal parameter pc is down to zero: further meristems as a prolongation, 
		and lateral meristems (for tiller formation), but only up to a maximal rank: */
		else if (rank <= ConstPara.MAX_RANK) 
		(
			[
				//{
				//	double RH_ANGLE = 90;//Math.random()*360 + 90; //wy131203
				//	double RL_ANGLE = 20; //random(ConstPara.RL_ANGLE_MIN,ConstPara.RL_ANGLE_MAX);//wy131203
				//}
				//RV(-0.3) 
				//RH(RH_ANGLE) //wy131203 ·½Î»½Ç
				//RL(RL_ANGLE) //wy131203 ·ÖÞÁ½Ç¶È changed from 1.25*RL_ANGLE
				RV(-0.3) RH(ConstPara.trha*rank) RL(ConstPara.trla)
				tl:Tiller(rank, order+1, false) 
				{	tl.setID(m[ID]);
					tl[tl_num] = 0;
				} //lfxu101105  //lfxu101224
			]
			/* the culm bends up due to phototropism: */
			tropism(m, HEAD, ConstPara.CULM_BEND)
			//RV(-0.1)
			RV(-0.05) //gbs100225 //wy131208close
			//intn:Internode(0.001,0.0, rank, order, 0, age) {intn.setID(m[ID]);}  //wy131208close
			BotNode(rank, 0.0001)
			if(rank==1) 
				(RH(90))//(RH(irandom(0,360)))  //lfxu101027, gbs:random orientation of the plants//wy131203
			[
				//{println("here test" + " I" + ind[ID] + " rank " + rank);}
					//LSRotation(lsAngle.evaluate ((float) rank / g.maxRank) * par.SCALE_LA) 
					//RL(5) //wy131204 ³õÊ¼Ò¶½Ç¶È
					//LSRotation(15)  //lfxu110121
					//Sheath(0.01,0.001,fsl[rank-1],0.0005,rank,order)   //lfxu090714
					//LSRotation(15)   //lfxu090701  20 //wy131204changed to
					//LSRotation(angle[order]) //wy131204 Ò¶Æ¬×îÖÕ½Ç¶È
					//AdjustLU() F(0,0) //wy131204
					RH(180*rank) ////wy131204»¥Éú
					lf:Leaf(rank,0.005,0.0005,1,false, 0, order, 0) 
					//lf:Leaf(rank,0.5,0.05,1,false, 0, order, 0) //test1230
					{	lf.setID(m[ID]);
						lf.appearDay = ind.growDays;
						//println("--------lf.appearDay:" + lf.appearDay);
						lf.tiltAngle = 90-m[angle]; //wy131208
					} 
			]
			intn:Internode(0.001,0.0, rank, order, 0, age) 
			{	intn.setID(m[ID]);
				intn.appearDay = ind.growDays;
				//println("--------intn.appearDay:" + intn.appearDay);
			}
			//RH(rank <= 4 ? 75 * rank : 180) //+random(-4,4)) //reason of angle change in grains //wy131203
			//RH(180)
			m
			{
				//m[ID] = ind[ID];
				m[plastChron] := phyllochron[m[rank]]; 
				m[rank] :+= 1; 
				m[grownOut] := true;
				m.angle = (m[order]-1)*ConstPara.trla*(1-ConstPara.CULM_BEND); //wy131208
			}
		) else (
			break
		)
		if(ind.earFlag)
		(
			intn:Internode(0.001,0.003, rank, order, 0, age) 
			{	intn.setID(m[ID]);
				intn.appearDay = ind.growDays;
			}
			infm:InflMeristem(1,1) 
			{infm.setID(m[ID]);} //lfxu100517
		)
		;
		
		
		/*
		//lfxu090715 //lfxu101121, what's the use of grainNo? grain number per brach?
		if (ConstPara.TEMP_SUM[RiceBreeder.INSTANCE.breedTime] >= 1600)  //lfxu090701  //lfxu100701, 1600->1300
		//if ((ConstPara.TEMP_SUM[RiceBreeder.INSTANCE.breedTime] >= 1600) && (RiceBreeder.INSTANCE.earFlag))
		(
			{
				//if(RiceBreeder.INSTANCE.earFlag)
				if(ind.earFlag)
				{
					float tmpCpool = ind.CpoolStart-ind.leafDMGrowth-ind.internodeDMGrowth-ind.grainDMGrowth;
					ind.grainFinalNumber = (long)(tmpCpool/ConstPara.FLOWER);
					ind.earGrowDays = 1;
					ind.earFlag = false;
					//println("-------grain final number: " + ind.grainFinalNumber);
				}
			}
			//RH(180)
			intn:Internode(0.001,0.003, rank, order, 0, age) {intn.setID(m[ID]);}  //lfxu100406
			infm:InflMeristem(1,1) {infm.setID(m[ID]);} //lfxu100517
		);*/
	//{derive();}
	
	//lfxu101220
	tl: Tiller(rank, order, false)(* -ancestor-> ind:Individual *), (RiceBreeder.INSTANCE.breedTime<=60)
	//(tl[tl_num]<Parameter.INSTANCE.TNB_G_SL[tl[ID]-1][Math.min(RiceBreeder.INSTANCE.time/10,8)])
	==>
		{   //int IDTemp = tl[ID]-1;
			int stage = Math.min(RiceBreeder.INSTANCE.breedTime/10, 8);  //stage 0-8  //lfxu101212
			//float MAX_TNB = Parameter.INSTANCE.TNB_G_SL[IDTemp][stage];
			int tnb_temp[] = {1,3,5,7,9,11,9,7,5};
		}
		//if((rank<=6) && (order<=3) && countTiller(tl[ID])<MAX_TNB)  //lfxu101216
		//if(countTiller(tl[ID])<MAX_TNB)
		//if(countTiller(tl[ID])<tnb_temp[stage])  
		{
			long currentTilNumber = count((* til:Tiller, (til[ID]==ind[ID] && til[grow] ) *)); //current tiller number
			long currentMerNumber = count((* mer:Meristem, (mer[ID]==ind[ID]) *)); //current meristem number
		}
		
		if(currentTilNumber + currentMerNumber < ConstPara.ftn)
		(
			[
				//{
				//	double RH_ANGLE = 90;//Math.random()*360 + 90; //wy131203
				//	double RL_ANGLE = 20;//random(ConstPara.RL_ANGLE_MIN,ConstPara.RL_ANGLE_MAX);//wy131203
				//}
				//RV(-0.3) 
				//RH(RH_ANGLE) //wy131203
				//RL(1.25*RL_ANGLE) //wy131203
				RV(-0.3) RH(ConstPara.trha+10) RL(ConstPara.trla)
				til:Tiller(rank, order+1, true) {til.setID(ind[ID]);} 
				mer:Meristem(phyllochron[rank], rank + 1, order, 1, false) 
				{	mer.setID(tl[ID]);
					mer[angle] = (til[order]*ConstPara.trla)*(1-ConstPara.CULM_BEND)**til[order];
				} 
			]
		)
		{derive();}
		;
	
	pred:. infm:InflMeristem(rank, order) (* -ancestor-> ind:Individual *)
	==>> pred 
		/*
		{
			long counter = number;
			//println(t+" -t----------m.t- "+m.t+" ---------counter- "+counter);
			long current_grain_number = count((* g:Grain, (g[ID]==m[ID]) *));   //lfxu0907298
			float grain_sink = sum((* g:Grain, (g[ID]==m[ID]) *).pgr); //getPgr()-->pgr,wy131121
			
			//int index_temp = m[ID]-1+Parameter.INSTANCE.whichIndividuals; //lfxu101109, defaut //wy131125
			//index_temp = Parameter.INSTANCE.entry[Parameter.INSTANCE.traitForVisualization][m[ID]-1] - 1; //run Data
			//int MAX_GN = Math.round(Parameter.INSTANCE.MaxGrainNumber[index_temp]);  //lfxu101120
			int MAX_GN = 950;  //lfxu101120, for testing
			
		}
		if(t <= 0)
		(	
			break 	
		) else 
		if(t < 1 && ind[Cpool] >0.5 && current_grain_number <= MAX_GN && grain_sink <= 1)  //lfxu101109
		*/
		{
			long currentGrainNumber = count((* g:Grain, (g[ID]==infm[ID]) *));//wy131203
			long currentInfNumber = count((* inf:InflMeristem, (inf[ID]==infm[ID])*));
		}
		if(ind[Cpool]>0.5 && (currentGrainNumber + currentInfNumber <ind[grainFinalNumber]) )
		//if(ind[Cpool]>0.5 && (ind.earGrowDays <19) )
		(
			rachis((float) grsize.evaluate(1) * 0.00035)
			//if (counter>150 && m[order]==1 && m[rank]<5) (   //gbs101028
			if (infm[order]==1 && infm[rank]<5) 
			(   //lfxu101121
				[	RL(3) RV(0.5) //RH(random(-20,20)) //wy131130,chenged from RL(7),add RH() //131203
					im:InflMeristem(1, order+1) {im.setID(infm[ID]);}
				]
			)
			[	RL(10) RH(90) //lfxu100517
				g:Grain(0, 0.055, (probability(0.5))?grain:grainAlt, order, rank) {g.setID(infm[ID]);}
				RH(180) RL(10)
			] 
			RL(10) RH(180) 
			RV(0.2) infm {infm.rank+1;}
		); 
		
	//g:Grain, (Parameter.INSTANCE.Cpool[g[ID]-1]>0) ::>  //lfxu101120
	g:Grain (* -ancestor-> ind:Individual*)
	::>
		{
			if (ind.Cpool>0 && ind.earGrowDays<=40)
			{
				//float te = 40;//60; //20;  //40  //lfxu101120
				//float tm = 15;//20;//20//10 //30 
				//float fnD = g.finalDM();
				
				//float pgr_grain = SigmoidFunction.YinDerivative(fnD, te, tm, g[age]); //wy131120add //wy131125
				//float grain_growth = veg.Growth(fnD, te, tm, g[age], g[ID]); //wy131120change to
				//float grain_growth = SigmoidFunction.Growth(pgr_grain, ind[SinkDemand], ind[Cpool]); //wy131125
				
				//update pgr and agr,wy131121
				//g[pgr] = SigmoidFunction.YinDerivative(fnD, te, tm, g[age]); //wy131120add
				//g[agr] = SigmoidFunction.Growth(g[pgr], ind[SinkDemand], ind[Cpool]);
				//g[agr2] = SigmoidFunction.Growth2(g[pgr], ind[SinkDemand], ind[Cpool]);
				//update scale, dryMass,wy131121mark
				//g.setScale(0.055 + 0.25*SigmoidFunction.Growth(SigmoidFunction.YinDerivative(0.01, te, tm, g[age]), ind[SinkDemand], ind[Cpool]));
				//g.setScale(0.055 + 0.25*g[agr]);
				g.updateScale();
				g.updateDryMass();
				//g[dryMass] += g[agr];
				//ind.grainDMGrowth = g[agr]; //131128
			}
			//g[age]++; //update age, wy131121mark
			g.updateAge();
		}
	
	
	//lt:LeafTip	::> lt[age]++; //wy131120
	//lt2:LeafTip, (lt2[age]>=10) ==> ; //wy131120

	intn:Internode (* -ancestor-> ind:Individual *)
	::>
	{
		//grow, update agr, agr2, arg_radius, length, radius, drymass and age
		if (ind.Cpool>0)
		{	//This is the place where Superior Genotype acts on visualization of the individuals
			//intn[agr] = SigmoidFunction.Growth(intn[pgr], ind[SinkDemand], ind[Cpool]);//intn.updateAgr();//wy131124
			//intn[agr2] = SigmoidFunction.Growth2(intn[pgr], ind[SinkDemand], ind[Cpool]); //intn.updateAgr2();//wy131124
			//intn[agr_radius] = SigmoidFunction.Growth(intn[pgr_radius], ind[SinkDemand], ind[Cpool]); //intn.updateRadiusAgr();//wy131124
			intn.updateLength();
			intn.updateRadius();
			intn.updateDryMass();
			//ind.internodeDMGrowth += intn[agr]; //131128
		}
		intn.updateAge();
	}

	bn: BotNode(rank, radius), (rank > 5 && radius <= 0.001f) ::> 
	{
		bn[radius] += 0.0001f;
	}

	lf:Leaf (* -ancestor-> ind:Individual *) /*, (* m:M lt:LeafTip *)*/ 
	::> 
	{
		lf.updateSen(); //wy131123open
		//grow, update agr, agr2, length, diameter, drymass, age, radiation
		if (ind.Cpool>0)
		{
			//lf[agr] = SigmoidFunction.Growth(lf[pgr], ind[SinkDemand], ind[Cpool]); //lf.updateAgr(); //wy131124
			//lf[agr2] = SigmoidFunction.Growth2(lf[pgr], ind[SinkDemand], ind[Cpool]); //lf.updateAgr2(); //wy131124
			lf.updateLength();
			lf.updateDiameter();
			lf.updateDryMass();
			//ind.leafDMGrowth += lf[agr]; //131128
		}
		lf.updateAngle();
		lf.age++;
		lf[radiation] = RiceBreeder.INSTANCE.radiation.getAbsorbedPower(lf).integrate()*ConstPara.GRPAR;
		//photosynthesis
		lf.photosynthesis();
	}
	
	/*wy131204
	r:LSRotation, (r[angle] < r.finalAngle) ::>
		r[angle] := Math.min (r[angle] + 1, r[finalAngle]);
	
	r:LBRotation(max, counter) ::>
		if (counter > 0)
		{
			r.counter--;
		}
		else if (r[angle] < max)
		{
			r[angle] :+= 1.5;
		}
	*/
	/*wy131120
	//gbs090624:
	sh:Sheath Node Node f:M bl:Leaf ::>  {
		//lfxu090715  the top sheath is too long
		//Internode intn = first((* a:Internode, (a.rank==sh.rank && a.order==sh.order) *));
		if(sh[length]<=sh[fsl]) //&& sh[length] < intn[length]
		{
			sh[length]+=0.01;
			f[length]:+=0.01;
		}
		sh[diameter] = bl[diameter];
	}*/

]
