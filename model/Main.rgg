import Sky.*;
import Vegetative.*;
import Plant.*;
import Chromosome.*;
import java.util.HashMap;

final Field field = Field.INSTANCE;                          

RiceBreeder riceBreeder = RiceBreeder.INSTANCE;
ParticleSwarm ps = ParticleSwarm.getInstance();
public double[][] fit = new double[ps.maxTime+1][2];
protected float start = 0;
public int count = 0;
public int cg = 0;
public int runTime = ps.maxTime;//运行次数
private boolean stopOp = false;
public double[][] duplicate = new double[ps.maxTime+1][2];

/**
 * HashMap<K,V>: K为Chromosome， V为Chromosome的适应度值
 * 功能：存放出现过的Chromosome
 * 用途：如果Chromosome已经存在，那么就不需要对该个体进行适应度值计算，
 *       将已经存在的值拷贝到该Chromosome中
 */
 HashMap hashMap = new HashMap();

int runCounter = 0;

public int pattern = 0;
private boolean change = true;

//-----------------------------整个程序的入口-----------------------------------
//初始化场景
protected void init()
{
	field.build(riceBreeder.year, riceBreeder.month, riceBreeder.day, riceBreeder.hour); 
	riceBreeder.sky.build(); //建立天空
	if(change) {
		start = System.currentTimeMillis();
		ps.preparation();
		riceBreeder.initSpacing();
		change = false;
	}
	if(cg<runTime||(cg==runTime&&count!=4)){
		field.newGeneration(); //产生稻田中个水稻个体
	}
	else{
		field.newGenerationFinal();
	}
}

//-----------------------------FSPM生长部分-------------------------------------
/**
 * 植株的生长过程，外部显示计算，点击detailedGrow和run detailedGrow按钮均可
 */
public void detailedGrow() {
	//初始化记录文件
	if(riceBreeder.breedTime == 1) {
		ReportUtil.clear2();
		ReportUtil.setTimeLog(ConstPara.growthLog, "Start time"); //记录优化开始时间
		println("Field Population: " + ConstPara.norows + "*" + ConstPara.nocols);
		riceBreeder.initCharts(); //单株时使用
	}
	riceBreeder.detailedGrow(); //植株详细生长过程
	if(riceBreeder.breedTime == ConstPara.TOTAL_GROWTH_LEN) { //植株生长结束
		ReportUtil.setTimeLog(ConstPara.growthLog, "Final time"); //记录优化结束时间
	}
}

/**
 * 植株的生长过程，内部隐藏计算，点击hiddenGrow按钮，可以极大提高程序运行速度
 */
public void hiddenGrow() {
	ReportUtil.clear2();
	ReportUtil.setTimeLog(ConstPara.growthLog, "Start time"); //记录优化开始时间
	println("Field Population: " + ConstPara.norows + "*" + ConstPara.nocols);
	riceBreeder.hiddenGrow();
	ReportUtil.setTimeLog(ConstPara.growthLog, "Final time"); //记录优化开始时间
}

///////////////////////////////优化部分/////////////////////////////////////////
//优化按钮
public void optimize()
{
	int whichGeneration = (runCounter)/ConstGaPara.populationSize; //计算优化代数
	int whichIndPerGeneration = runCounter%ConstGaPara.populationSize + 1; //计算这是该代的第几个个体，控制每一代的种群数目
	//判断是否需要生成该个体
	if((whichGeneration<=ConstGaPara.maxGeneration) && 
		(whichIndPerGeneration<=ConstGaPara.populationSize)) {
		derive();
		reset();
		updateSysPara();
		ga.setCurrentGeneration(whichGeneration); //wy131206
		//判断是否初始化种群
		if((whichGeneration==0) && (whichIndPerGeneration==1)) {
			//数据文件初始化
			ReportUtil.clear();
			ReportUtil.setTimeLog(ConstGaPara.timeLog, "Start time"); //记录优化开始时间
			ga.initPopulation();//初始化种群
			println("Field Population: " + ConstPara.norows + "*" + ConstPara.nocols);
		} 
		if((whichGeneration==1) && (whichIndPerGeneration==1)) {
			println("Start Optimization: ");
		}
		print("G" + whichGeneration + ",R" + whichIndPerGeneration + " (");
		//根据Chromosome是否存在，决定是否进行适应度值计算
		if(hashMap.containsKey(ga.getPopulation()[whichIndPerGeneration-1])) { //存在
			//从hashMap中取出该Chromosome，并把适应度值赋值给ga的编号为whichIndPerGeneration的Chromosome
			double tmpFitness = (Double)hashMap.get(ga.getPopulation()[whichIndPerGeneration-1]);
			ga.getPopulation()[whichIndPerGeneration-1].setFitness(tmpFitness);
		} else { //不存在
			//计算适应度
			//传递ga的原因，ga中带有植株生长需要的数据
			riceBreeder.setFitness(ga, whichGeneration, whichIndPerGeneration);//这是一个获得适应度值的过程
			//带着适应度值把该Chromosome存放到hashMap中
			hashMap.put(ga.getPopulation()[whichIndPerGeneration-1], ga.getPopulation()[whichIndPerGeneration-1].getFitness());
		}
		//提示个体计算完毕
		println(" ) is presented. ");
		//每代最后一个个体计算结束后对GA种群进行排序、精英选择、记录植株株型和产量、进化、竞争
		if(whichIndPerGeneration == ga.getPopulation().length) {
			ga.sort(); //GA种群排序
			ReportUtil.log(ga); //记录植株株型和产量
			ReportUtil.div(ga);
			println("G" + whichGeneration +  " is completed."); //提示第几代优化完毕
			//如果whichGeneration是ConstGaPara.maxGeneration的话，就是第maxGeneration+1次优化了
			if(whichGeneration < ConstGaPara.maxGeneration) {
				ga.elite(); //精英选择
				ga.evolve(); //GA种群进化
				ga.compete(); //GA种群竞争
			}
			//记录优化结束时间，第maxGeneration次优化后显示生成最优个体
			if(whichGeneration==ConstGaPara.maxGeneration) {
				ReportUtil.setTimeLog(ConstGaPara.timeLog, "Finish time"); //记录优化结束时间
				print("The Best Plant: (");
				riceBreeder.displayTheBest(ga, whichGeneration, whichIndPerGeneration); //显示生成最优个体
				println(") is presented.");
			}
		}
		runCounter++;
	}
}

public void optimizePSO()
{
	float stop = 0;
	if(!stopOp)
	{
		if(riceBreeder.breedTime == 1) {
			ReportUtil.clear();
			ReportUtil.setTimeLog(ConstGaPara.timeLog, "Start time"); //记录优化开始时间
			println("Field Population: " + ConstPara.norows + "*" + ConstPara.nocols);
			riceBreeder.initCharts(); //单株时使用
		}
		
		println("cg:"+cg+" count:"+count);//+" a ："+stopOp);
		riceBreeder.updatePSO(cg, count, ps.getArea(cg, count)); //植株详细生长过程
		PSO(cg, count, ps.getArea(cg, count));
		
		if(cg < runTime||count<5)
		{
			ps.optimize(pattern, count);
		}
		
		if(cg == runTime&&count==4)
		{
			ps.write(cg, count);
			ps.display();
			stop = System.currentTimeMillis();
			stopOp = true;
			println("Time:"+(stop-start));
			println("best cg:"+ps.bestG[0]+"_"+ps.bestG[1]);
		}
		renew();
		if(cg==0){
			cg++;
			riceBreeder.updateSpacingChart(ps.spacingProcess[cg-1][0], ps.spacingProcess[cg-1][1]);
			return;
		}
	}
	count++;
	if(count==5){
		count=0;
		cg++;
		riceBreeder.updateSpacingChart(ps.spacingProcess[cg-1][0], ps.spacingProcess[cg-1][1]);
	}
}

protected void renew(){
	derive();
	reset();
	updateSysPara();
}

//更新系统参数
protected void updateSysPara()
{
	riceBreeder.year = ConstPara.YEAR;
	riceBreeder.month = ConstPara.MONTH;
	riceBreeder.day = ConstPara.DAY;
	riceBreeder.hour = ConstPara.HOUR;
	riceBreeder.breedTime = 1;
}

protected void copy() {
	duplicate = fit;
	println("fit:"+fit+" dup:"+duplicate);
	getFitAdd("");
}

protected double[][] getFitAdd(String s) {
	println("test fit:"+fit+" "+s);
	return fit;
}

protected void copy(double[][] copy) {
	for(int i=0; i<copy.length; i++) {
		for(int j=0; j<copy[i].length; j++) {
			duplicate[i][j] = copy[i][j];
		}
	}
}

protected void PSO(int cg, int count, double area) {
	for(int i = 0; i<5&&cg==0; i++) {
		ps.totalRadiation[cg][i] = riceBreeder.getSum();//sum((* ind:Individual *).grainDM);//群体产量
	}
		ps.totalRadiation[cg][count] = riceBreeder.getSum();//sum((* ind:Individual *).grainDM);//群体产量
		ps.setFitness(cg, count, ps.totalRadiation[cg][count], area);
	if(cg == 0&&count==0){
		ps.lessSoilRadiation = ps.soilRadiation[cg][0];
		for(int i=0; i<ps.particle; i++){
			ps.soilRadiation[0][i] = riceBreeder.getAos();
			ps.unitSoilRadiation[0][i] = ps.soilRadiation[0][i]/area;
			ps.lllessRate[0][i] = ps.totalRadiation[0][i]/area;
			print("area:"+format_4(area));
			print(" fitness:"+format_4(ps.totalRadiation[0][i]));
			println(" rate:"+format_4(ps.lllessRate[0][i]));
		}                   
	}else{
		ps.soilRadiation[cg][count] = riceBreeder.getAos();;
		ps.unitSoilRadiation[cg][count] = ps.soilRadiation[cg][count]/area;
		ps.lllessRate[cg][count] = ps.totalRadiation[cg][count]/area;
		print("area:"+format_4(area));
		print(" fitness:"+format_4(ps.totalRadiation[cg][count]));
		println(" rate:"+format_4(ps.lllessRate[cg][count]));
	}
	if(cg==0){
		fit[cg][0] = ps.lllessRate[cg][0];
		fit[cg][1] = (ps.lllessRate[cg][0]/area);
	}else if(count==4) {
		fit[cg][0] = ps.lllessRate[cg][0];
		fit[cg][1] = ps.lllessRate[cg][0]/area;
	}
	if(cg==0||count==4) {
		riceBreeder.updateFitnessChart(ps.fitness[cg][0], ps.fitness[cg][1]);
	}
	if(cg==ps.maxTime&&count==4) {
		ps.write(fit);
	}
}

protected double format_4(double x){
	return ((double)((int)(x*10000)))/10000;
}
