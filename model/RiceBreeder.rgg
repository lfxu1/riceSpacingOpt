/** RiceBreeder.rgg, renamed from 28.01.2010 (Lifeng Xu)
    rice breeder completed, 26.03.2011 (Lifeng Xu)
    ID added to each organ(finalized at 19.01.2010), 06.04.2010 (Lifeng Xu)
	Modified for the new project, since 12.07.2012
	*/
import Sky.*;
import Vegetative.*;
import Plant.*;

final Sky sky = Sky.INSTANCE;
Main main = Main.INSTANCE;

//breed time
int year = ConstPara.YEAR;
int month = ConstPara.MONTH;
int day = ConstPara.DAY;
int hour = ConstPara.HOUR;

int breedTime = 1;
//boolean earFlag = true;

LightModel radiation = new LightModel(ConstPara.RAY_COUNT,ConstPara.RAY_DEPTH);  //temp use	//lfxu100419

const DatasetRef envChart = new DatasetRef("Environment"); //environment
const DatasetRef sunPositionChart = new DatasetRef("Sun Position");
const DatasetRef lightRadiationChart = new DatasetRef("Direct and Diffused Light"); //radiation
const DatasetRef growthRateChart = new DatasetRef("Growth Rate"); // growth rate 
const DatasetRef dryMassChart = new DatasetRef("Dry Mass"); // total dry mass
const DatasetRef leafAreaChart = new DatasetRef("Leaf Area");
const DatasetRef absorbedRadiationChart = new DatasetRef("Absorbed Radiation");
const DatasetRef producerAndConsumerChart = new DatasetRef("Producer and Consumer"); //Producer and Consumer
const DatasetRef leafAngleChart = new DatasetRef("Leaf Angle");
const DatasetRef spacingChart = new DatasetRef("Spacing");
const DatasetRef fitnessChart = new DatasetRef("Fitness");
const DatasetRef fitRateChart = new DatasetRef("Fitness divide Area");

final Vegetative veg = Vegetative.INSTANCE;
ParticleSwarm ps = ParticleSwarm.getInstance();;
protected double aos = 0;

//-----------------------------FSPM生长过程-------------------------------------
/**
 * 植株详细生长过程
 */
protected void detailedGrow()
{

	if(breedTime <= ConstPara.TOTAL_GROWTH_LEN) {
		radiation.compute(); // 光分布到场景中
		updateIndividual(); //植株状态变化和形态变化
		logGrowth(); //记录单株生长过程
		//logGrowth2(); //记录群体植株生长过程
		updateDate(); //更新日期
		updateSky(); //更新天空，包括太阳位置和各光源辐射度的变化
		//updateCharts(); //配合initCharts使用--------需要在Main中的detailedGrow()中打开riceBreeder.initCharts();
	} 
	
	if(breedTime == ConstPara.TOTAL_GROWTH_LEN){
		ps.soilRadiation[0][1] = 1;
	}
}

/** 
 * 植株生长过程，内部计算
 */
protected void hiddenGrow() {
	for (apply (ConstPara.TOTAL_GROWTH_LEN)) //植株生长
	{
		detailedGrow(); 
	}
	//ps.totalRadiation[ps.currentGeneration][ps.count] = sum((* ind:Individual *).grainDM);//群体产量
}

protected void updatePSO(int cg, int count, double area) {
	hiddenGrow();
}

protected double getSum() {
	double sum = 0;
	for(int i=1; i<ConstPara.norows-1; i++) {
		for(int j=1; j<ConstPara.nocols-1; j++) {
			sum += sum((* ind:Individual, (ind[ID]==(i*ConstPara.norows+j+1)) *).grainDM);
		}
	}
	return sum((* ind:Individual *).grainDM);
}

protected double getAos() {
	return aos;
}

protected void PSO(int cg, int count, double area) {
	for(int i = 0; i<5&&cg==0; i++) {
		ps.totalRadiation[cg][i] = 1;//sum((* ind:Individual *).grainDM);//群体产量
	}
		ps.totalRadiation[cg][count] = 1;//sum((* ind:Individual *).grainDM);//群体产量
		ps.setFitness(cg, count, ps.totalRadiation[cg][count], area);

	if(cg == 0&&count==0){
		ps.lessSoilRadiation = ps.soilRadiation[cg][0];
		for(int i=0; i<ps.particle; i++){
			ps.soilRadiation[0][i] = aos;
			ps.unitSoilRadiation[0][i] = aos/area;
			ps.lllessRate[0][i] = ps.totalRadiation[0][i]/area;
			println("area:"+area);
			println("fitness:"+ps.lllessRate[0][i]);
			println("rate:"+ps.lllessRate[0][i]/area);
		}                   
	}else{
		ps.soilRadiation[cg][count] = aos;
		ps.unitSoilRadiation[cg][count] = aos/area;
		ps.lllessRate[cg][count] = ps.totalRadiation[cg][count]/area;
		print("area:"+area);
		println(" fitness:"+ps.lllessRate[cg][count]);
	}
	if(cg==0){
		main.fit[cg][0] = ps.lllessRate[cg][0];
		main.fit[cg][1] = (ps.lllessRate[cg][0]/area);
	}else if(count==4) {
		ps.radiationForAll[cg][1] = ps.lllessRate[cg][0];
		main.fit[cg][0] = ps.lllessRate[cg][0];
		ps.radiationForAll[cg][2] = ps.lllessRate[cg][0]/area;
		println("++++++++++++++++++++++++riceBreeder"+ps.radiationForAll);
		main.fit[cg][1] = ps.lllessRate[cg][0]/area;
		for(int i=1; i<5; i++){
			if(ps.radiationForAll[cg][2]<(ps.lllessRate[cg][i]/area)){
				ps.radiationForAll[cg][2]=(ps.lllessRate[cg][i]/area);
				ps.radiationForAll[cg][1]=ps.lllessRate[cg][i];
				main.fit[cg][0] = ps.lllessRate[cg][i];
				main.fit[cg][1] = (ps.lllessRate[cg][i]/area);
			}
		}
	}
	if(cg==0||count==4) {
		updateFitnessChart(ps.fitness[cg][0], ps.fitness[cg][1]);
	}

	main.copy();
	if(cg==ps.maxTime&&count==4) {
		ps.write(main.fit);
		println("============start:"+main.duplicate);
	}
}

//植株状态变化和形态变化
protected void updateIndividual()
{
	updateIndPre();  // 植株形态变化前的植株生长过程
	veg.morphology(); //植株形态变化
	updateIndSuf(); //植株形态变化后的植株生长过程
}

//记录植株生长过程
protected void logGrowth()
[
	ind:Individual 
	::>
	{
		String s1 = "I" + ind[ID] + " D" + breedTime + 
			" LA=" + ReportUtil.format2(ind.leafArea) + 
			" LR=" + ReportUtil.format2(ind.leafRadiation) + 
			" LLP=" + ReportUtil.format2(ind.leafLocPool) +
			" C0=" + ReportUtil.format2(ind.CpoolStart) +
			" C-=" + ReportUtil.format2(ind.consumer) + 
			" --> " +
			" DM( T=" + ReportUtil.format2(ind.totalDryMass) + 
					",L=" + ReportUtil.format2(ind.leafDM) + 
					",I=" + ReportUtil.format2(ind.internodeDM) + 
					",G=" + ReportUtil.format2(ind.grainDM) + " )" +
					" GN=" + ReportUtil.format(ind.grainNumber) + 
					" GFN=" + ReportUtil.format(ind.grainFinalNumber)
			;
		ReportUtil.append(ConstPara.growthLog, s1); //记录生长信息
	}
]

//记录群体植株生长过程（均值）
protected void logGrowth2()
{
	float totalNum = ConstPara.norows*ConstPara.nocols;
	float leafAreaAvg = sum((* a:Individual *).leafArea)/(totalNum);
	float leafRadiationAvg = sum((* a:Individual *).leafRadiation)/(totalNum);
	float leafLocPoolAvg = sum((* a:Individual *).leafLocPool)/(totalNum);
	float CpoolStartAvg = sum((* a:Individual *).CpoolStart)/(totalNum);
	float consumerAvg = sum((* a:Individual *).consumer)/(totalNum);
	float totalDryMassAvg = sum((* a:Individual *).totalDryMass)/(totalNum);
	float leafDMAvg = sum((* a:Individual *).leafDM)/(totalNum);
	float internodeDMAvg = sum((* a:Individual *).internodeDM)/(totalNum);
	float grainDMAvg = sum((* a:Individual *).grainDM)/(totalNum);
	float grainNumberAvg = sum((* a:Individual *).grainNumber)/(totalNum);
	float grainFinalNumberAvg = sum((* a:Individual *).grainFinalNumber)/(totalNum);
	
	String s = "D" + breedTime + 
			" LA=" + ReportUtil.format2(leafAreaAvg) + 
			" LR=" + ReportUtil.format2(leafRadiationAvg) + 
			" LLP=" + ReportUtil.format2(leafLocPoolAvg) +
			" C0=" + ReportUtil.format2(CpoolStartAvg) +
			" C-=" + ReportUtil.format2(consumerAvg) + 
			" --> " +
			" DM( T=" + ReportUtil.format2(totalDryMassAvg) + 
					",L=" + ReportUtil.format2(leafDMAvg) + 
					",I=" + ReportUtil.format2(internodeDMAvg) + 
					",G=" + ReportUtil.format2(grainDMAvg) + " )" +
					" GN=" + ReportUtil.format(grainNumberAvg) + 
					" GFN=" + ReportUtil.format(grainFinalNumberAvg)
			;
	println(s);
	ReportUtil.append(ConstPara.growthLog, s); //记录生长信息
}

//更新日期
protected void updateDate()
{
	breedTime += 1; //5*par.DELTA_T;  //DELTA_T = 0.2 //lfxu100420 //wy131125
	int[] result = TimeFunction.updateTimeByDay(year, month, day);
	year = result[0];
	month = result[1];
	day = result[2];
}

//更新天空，包括太阳位置和各光源辐射度的变化
protected void updateSky()[
{
	sky.update(year, month, day, hour);
}
	p:Parallelogram ::> 
	{
		aos += radiation.getAbsorbedPower(p).integrate();
	}
]


//------------------------------优化过程----------------------------------------
/**
 * 设置第whichGeneration代第whichIndPerGeneration个植株的适应度值（重点）
 */
protected void setFitness(GA ga, int whichGeneration, int whichIndPerGeneration)
{
	setPlantPara(ga, whichGeneration, whichIndPerGeneration); //获取生长数据
	hiddenGrow(); //植株生长，获得产量
	setYield(ga, whichGeneration, whichIndPerGeneration); //将产量作为适应度值
}

//从ga中获得植株生长的数据，并传递给植株
protected void setPlantPara(GA ga, int whichGeneration, int whichIndPerGeneration)
{
	//解码ga的基因，更新植株生长数据（重点）
	//变化株型的核心：目前植株的生长还不是使用OptPara.plantType[]
	for(int i=0; i<ConstGaPara.geneNumber; i++) 
	{
		ConstPara.plantType[i] = Double.parseDouble( //Sting转double
				ReportUtil.format( //调整精度
						CodeUtil.decode( //解码
								ga.getPopulation()[whichIndPerGeneration-1].getGene()[i], 
								ConstGaPara.lbound[i], ConstGaPara.ubound[i])
				)
			);
	}

	for(int i=0; i<ConstPara.fbl.length; i++) {
		//OptPara.fbl[i] = OptPara.plantType[i];
		ConstPara.fba[i] = ConstPara.plantType[i];
	}

	ConstPara.plantHeight = ConstPara.plantType[ConstPara.fba.length]*0.01;
	ConstPara.ftn = (int)ConstPara.plantType[ConstPara.fba.length+1];
	ConstPara.trla = (int)ConstPara.plantType[ConstPara.fbl.length+2];
	print("ph:" + ReportUtil.format2(ConstPara.plantHeight) + " ftn:" + ConstPara.ftn + " trla:" + ConstPara.trla);
}

protected void updateSpacingChart(double spacingInner, double spacingoOuter)
{
	spacingChart
		<<spacingInner//<<spacingoOuter
		;
}

protected void updateFitnessChart(double fitness, double fitRate)
{
	println("chart: fitness:"+fitness+" rate:"+fitRate);
	fitnessChart
		<<fitness
		;
	fitRateChart
		<<fitRate
		;
}

protected void updateSpacingChart()
{
	spacingChart
		<<ps.spacingProcess[ps.currentGeneration][0]//<<ps.spacingProcess[ps.currentGeneration][1]
		;
}

////将产量作为适应度值
protected void setYield(GA ga, int whichGeneration, int whichIndPerGeneration)
{
	float totalYield = sum((* ind:Individual *).grainDM)/(ConstPara.norows*ConstPara.nocols);//群体产量
	ga.getPopulation()[whichIndPerGeneration-1].setFitness(totalYield);
}

protected double getYield()
{
	double totalYield = sum((* ind:Individual *).grainDM)/(ConstPara.norows*ConstPara.nocols);//群体产量
	return totalYield;
}

protected void displayTheBest(GA ga, int whichGeneration, int whichIndPerGeneration)
{
	setPlantPara(ga, whichGeneration, whichIndPerGeneration); //获取生长数据
	hiddenGrow(); //植株生长，获得产量
}

/** 
 * 更新individual
 * @author weiyang 20131230
 */
protected void updateIndPre()
[
	ind:Individual 
	::>
	{
		ind.growDays++;
		if(ind.earFlag)
		{
			ind.earGrowDays++;
		}
		ind.leafArea(); //计算叶面积
		ind.leafRadiation(); //计算光吸收量
		ind.leafProducer(); //光合作用
		ind.updateCpool(); //更新碳池
		ind.maintenanceRespiration();//维持呼吸消耗碳池同化物
		ind.updateSinkDemand(); //计算各器官库强度
		
		//抽穗时计算籽粒最大数目
		if (ConstPara.TEMP_SUM[breedTime] >= ConstPara.EAR_TEMP_SUM)
		{
			//println("------------------------");
			if(!(ind.earFlag))
			{
				float tmpCpool = ind.CpoolStart;//(9/10)*ind.CpoolStart; //ind.CpoolStart;
				ind.grainFinalNumber = (long)((tmpCpool)/ConstPara.FLOWER);
				ind.earGrowDays = 1;
				ind.earFlag = true;
			}
		}
		
		ind.updateAgr(); //计算各器官生长速率
	}
]

protected void updateIndSuf()
[
	ind:Individual 
	::>
	{
		ind.rootConsumer(); //根消耗碳池同化物
		ind.morphologyConsumer(); //形态变化消耗碳池同化物
		ind.updateGrainNumber(); //更新籽粒数目
		ind.updateDryMass(); //更新各器官干物质重量
	}
]




protected void initSpacing() {
	spacingChart.clear()
			.setColumnKey(0, "the inner spacing")//.setColumnKey(1, "the outer spacing")
			;
	fitnessChart.clear()
			.setColumnKey(0, "the fitness")
			;
	fitRateChart.clear()
			.setColumnKey(0, "the fitness divide area")
			;
			
	chart(spacingChart, XY_PLOT);
	chart(fitnessChart, XY_PLOT);
	chart(fitRateChart, XY_PLOT);
}

//wy131206
protected void initCharts() 
{
	chart(leafAreaChart, XY_PLOT);
	chart(absorbedRadiationChart, XY_PLOT);
	chart(producerAndConsumerChart, XY_PLOT);
	chart(leafAngleChart, XY_PLOT);*/
}

protected void updateCharts() 
{
	updateDryMassChart();
}

protected void updateDryMassChart()
{
	dryMassChart
		<<sum((* Individual *).internodeDM)
		<<sum((* Individual *).leafDM)
		<<sum((* Individual *).grainDM)
		<<sum((* Individual *).totalDryMass)
		<<sum((* Individual *).Cpool)
		;
}
