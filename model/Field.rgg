import RiceBreeder.*;
import Sky.*;
import Plant.*;
import Vegetative.*;

/**
 * Field -> Population -> Germ -> Individual -> Meristem
 * @author weiyang
 */
 
module Population;

//lfxu100401
const ShaderRef soil = new ShaderRef("soil");
ParticleSwarm ps = ParticleSwarm.getInstance();

//wy131130
//double RH_ANGLE = Math.random()*360 + 90;
//double RL_ANGLE = random(10,30);//Math.round(Math.random()*(55-40)+40);

//create "Tiankong", "Land" and "Population" modules
protected void build(int year, int month, int day, int hour)
[
	{ float[] sunResult = SunFunction.getSun(year, month, day, hour); }
	
	Axiom ==> 
	[
		[                                                                                          
			M(5)
			RL(90) RU(90) // to get a convenient position
			[ SunPoint(sunResult[0],sunResult[1],sunResult[2]) ]
			[ Tiankong(year, month, day, hour, sunResult[3]) ]
		]
	 	[RL(90) M(-12) Parallelogram(40,40).(setShader(soil))]
	];
]

//wy131125
protected void newGeneration ()
{
	for (apply (1)) reproduce(); //1.field configuration; 2.Population --> Germ //wy131119mark
	for (apply (1)) germination(); //present plants:Germ-->Meristem  // wy131119mark
}

protected void newGenerationFinal ()
{
	for (apply (1)) reproduceFinal(); //1.field configuration; 2.Population --> Germ //wy131119mark
	for (apply (1)) germination(); //present plants:Germ-->Meristem  // wy131119mark
}

protected void reproduce()
[
	p:Population
	==>> 
	p //wy131202
	{print("Spacing:"+ps.PSOspacing[ps.currentGeneration][ps.count][0]/*+", "+ps.PSOspacing[ps.currentGeneration][ps.count][0]*/+" ");}
	for (int row=0; row<ConstPara.norows; row++) //ÐÐ
	([
		for (int col=0; col<ConstPara.nocols; col++)(  //ÁÐ//lfxu110124 //wy131119:indivNum-->par.nocols
			[
			Translate(ps.PSOspacing[ps.currentGeneration][ps.count][0]*row/100, ps.PSOspacing[ps.currentGeneration][ps.count][0]*col/100,0)
			ger:Germ 
			{	ger[ID] = ConstPara.nocols*(row)+col+1; }
			]
		 )
	]);
]

protected void reproduceFinal()
[
	p:Population
	==>> 
	p //wy131202
	for (int row=0; row<ConstPara.norows; row++) //ÐÐ
	([
		for (int col=0; col<ConstPara.nocols; col++)(  //ÁÐ//lfxu110124 //wy131119:indivNum-->par.nocols
			[
			Translate(ps.PSOgBestspacing[0]*row/100, ps.PSOgBestspacing[0]*col/100,0)
			ger:Germ 
			{	ger[ID] = ConstPara.nocols*(row)+col+1; }
			]
		 )
	]);
]

protected void germination()
[
	ger:Germ //(* -ancestor-> pop:Population *)
	==>
	ind:Individual.(setCaption(ger[ID]), setFilled(true))
	{
		ind.setID(ger[ID]);//lfxu110214
	} 
	[ 
		{ double RH_ANGLE = 90; }
		RH(RH_ANGLE) 
		mer:Meristem(tsr0(1), 1, 1, 0, false)  {mer.setID(ger[ID]); mer.angle=0;} 
	];
]

//new phyllochron function, from fig. 13 of Dauzat and Jaffuel, 2003, unpubl.
float tsr0 (int rank) 
{
	if (rank<=10) {
		return 100;
	} else if(rank>10 && rank<=14 ) {
		return 100 + 10*rank;
	}
}
